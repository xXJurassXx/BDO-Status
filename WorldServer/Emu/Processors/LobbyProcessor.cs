using System;
using System.Collections.Generic;
using System.Linq;
using Commons.Enums;
using Commons.Models.Character;
using Commons.UID;
using Commons.Utils;
using FluentNHibernate.Cfg;
using FluentNHibernate.Cfg.Db;
using NHibernate;
using NHibernate.Tool.hbm2ddl;
using NHibernate.Util;
using NLog;
using WorldServer.Configs;
using WorldServer.Emu.Extensions;
using WorldServer.Emu.Interfaces;
using WorldServer.Emu.Models.Creature.Player;
using WorldServer.Emu.Models.MySql.Mapping.WorldMap;
using WorldServer.Emu.Models.Storages;
using WorldServer.Emu.Models.Storages.Abstracts;
using WorldServer.Emu.Networking;
using WorldServer.Emu.Networking.Handling.Frames.Send;
/*
   Author:Sagara
*/
namespace WorldServer.Emu.Processors
{
    public class LobbyProcessor : IProcessor
    {
        /// <summary>
        /// Logger for this class
        /// </summary>
        private static readonly Logger Log = LogManager.GetCurrentClassLogger();

        /// <summary>
        /// Game server dao factory
        /// </summary>
        private static ISessionFactory _gsDbFactory;

        /// <summary>
        /// Character uids generator
        /// </summary>
        private static Int32UidFactory _characterUidsFactory;

        /// <summary>
        /// Items uids generator
        /// </summary>
        private static Int32UidFactory _itemsUidsFactory;

        /// <summary>
        /// Game session uid`s generator
        /// </summary>
        private static Int32UidFactory _gameSessionFactory;

        /// <summary>
        /// Initilize service action
        /// </summary>
        /// <param name="previousInstanceContext"></param>
        public void OnLoad(object previousInstanceContext)
        {
            var config = Fluently.Configure().Database(MySQLConfiguration.Standard.ConnectionString(cs => cs.Is(
                    $"Server={CfgDatabase.Default.GameServerDaoHost};" +
                    $"Database={CfgDatabase.Default.GameServerDaoDatabase};" +
                    $"User={CfgDatabase.Default.GameServerDaoUsername}" +
                    $";Password={CfgDatabase.Default.GameServerDaoPassword};" +
                    "CharSet=utf8"))).Mappings(m =>
                    {
                        m.FluentMappings.AddFromNamespaceOf<CharacterMap>().AddFromNamespaceOf<StorageMap>();
                    });
            
            var export = new SchemaUpdate(config.BuildConfiguration());

            export.Execute(false, true);

            _gsDbFactory = config.BuildSessionFactory();

            var usedIds =  //Get all used character id`s
                _gsDbFactory.OpenSession().CreateSQLQuery("select `c_character_id` from `bd_characters`").List();

            var usedItemUids = _gsDbFactory.OpenSession().CreateSQLQuery("select `i_item_uid` from `bd_items`").List();

            if (usedIds.Any())
            {
                var cId = int.Parse(usedIds[usedIds.Count - 1].ToString());

                _characterUidsFactory = new Int32UidFactory(cId);
            }
            else _characterUidsFactory = new Int32UidFactory();
            
            if (usedItemUids.Any())
            {
                var iUid = int.Parse(usedItemUids[usedItemUids.Count - 1].ToString());

                _itemsUidsFactory = new Int32UidFactory(iUid);
            }
            else _itemsUidsFactory = new Int32UidFactory();

            _gameSessionFactory = new Int32UidFactory();
        }

        public void GetCharacterList(ClientConnection connection)
        {
            using (var db = _gsDbFactory.OpenSession())
            {
                var list = db.QueryOver<CharacterData>().Where(p => p.AccountId == connection.Account.Id).List();
                
                if(list != null)
                    connection.Characters = (List<CharacterData>) list;
                else
                    connection.Characters = new List<CharacterData>();

                foreach (var characterData in connection.Characters)               
                    characterData.EquipmentData = new EquipmentStorage(db.QueryOver<CharacterItem>().Where(i => 
                    i.CharacterId == characterData.CharacterId && i.StorageType == (int)StorageType.Equipment).List().ToDictionary<CharacterItem, short, AStorageItem>(e => 
                    (short)(e.Slot + 1), e => new InventoryItem(e.ItemId, e.Count) {StorageType = (StorageType) e.StorageType}), 48);           
                

                new SpCharacterList(connection.Account, connection.Characters).Send(connection);

                new SpRaw("FEFFFFFFFFFFFFFF00", 0x0c77, false).SendRaw(connection);
            }
        }

        public void CreateCharacterProcess(ClientConnection connection, CharacterData info)
        {
            var characterData = info;

            using (var db = _gsDbFactory.OpenSession())
            {
                if (db.QueryOver<CharacterData>().Where(s => s.CharacterName == info.CharacterName).Take(1).SingleOrDefault() != null)
                {
                    new SpCreateCharacterError().Send(connection);

                    return;
                }
                   
                using (var transaction = db.BeginTransaction())
                {
                    try
                    {
                        characterData.CharacterId = _characterUidsFactory.Next();
                        characterData.Surname = connection.Account.FamilyName;
                        characterData.Level = 1;
                        characterData.CreationDate = DateTime.Now;
                        characterData.CreatedId = 0;//for nhibernate driver
                        characterData.PositionX = -96297;
                        characterData.PositionY = -3872;
                        characterData.PositionZ = 77811;

                        var inventory = InventoryStorage.GetDefault(characterData.ClassType);
                        foreach (var daoItem in inventory.Items.Select(item => new CharacterItem
                        {
                            CharacterId = characterData.CharacterId,
                            ItemId = item.Value.ItemId,
                            ItemUid = _itemsUidsFactory.Next(),
                            Slot = item.Key - 1,
                            Count = item.Value.Count,
                            StorageType = (int) ((InventoryItem)item.Value).StorageType
                        }))                       
                            db.Save(daoItem);
                        
                        db.Save(characterData);

                        connection.Characters.Add(characterData);

                        new SpCreateCharacter(characterData).Send(connection, false);

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        Log.Error($"Cannot create character\n{ex}");
                    }                   
                }
            }          
        }

        public void DeleteCharacterProcess(ClientConnection connection, long characterId)
        {
            using (var db = _gsDbFactory.OpenSession())
            {
                using (var transaction = db.BeginTransaction())
                {
                    try
                    {
                        var deletionTime = (int)(DateTime.Now.UnixMilliseconds() / 1000);
                        var deleted = connection.Characters.First(s => s.CharacterId == characterId);

                        var equipment = db.QueryOver<CharacterItem>().Where(i => i.CharacterId == deleted.CharacterId).List();
                        for (int i = 0; i < equipment.Count; i++)
                            db.Delete(equipment[i]);
                        
                        db.Delete(deleted);

                        //TODO - Delayed removed task
                        new SpDeleteCharacter(characterId, 1, deletionTime).Send(connection);

                        transaction.Commit();
                    }
                    catch(Exception ex)
                    {
                        transaction.Rollback();
                        Log.Error(ex);
                    }
                }
            }
        }

        public void UpdateCharacter(ClientConnection connection)
        {
            using (var db = _gsDbFactory.OpenSession())
            {
                using (var transaction = db.BeginTransaction())
                {
                    try
                    {
                        var equipment = db.QueryOver<CharacterItem>().Where(i => i.CharacterId == connection.ActivePlayer.DatabaseCharacterData.CharacterId).List();
                        for (int i = 0; i < equipment.Count; i++)
                            db.Delete(equipment[i]);

                        /*Update inventory items*/
                        foreach (var daoItem in connection.ActivePlayer.Inventory.Items.Select(item => new CharacterItem
                        {
                            CharacterId = connection.ActivePlayer.DatabaseCharacterData.CharacterId,
                            ItemId = item.Value.ItemId,
                            ItemUid = _itemsUidsFactory.Next(),
                            Slot = item.Key - 1,
                            Count = item.Value.Count,
                            StorageType = (int)((InventoryItem)item.Value).StorageType
                        })) db.Save(daoItem);

                        /*Update equipment items*/
                        foreach (var daoItem in connection.ActivePlayer.Equipment.Items.Select(item => new CharacterItem
                        {
                            CharacterId = connection.ActivePlayer.DatabaseCharacterData.CharacterId,
                            ItemId = item.Value.ItemId,
                            ItemUid = _itemsUidsFactory.Next(),
                            Slot = item.Key - 1,
                            Count = item.Value.Count,
                            StorageType = (int)((InventoryItem)item.Value).StorageType
                        }))db.Save(daoItem);

                        db.Update(connection.ActivePlayer.DatabaseCharacterData);

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Log.Error($"Cannot update player id:{connection.ActivePlayer.DatabaseCharacterData.CharacterId} exception:\n{ex}");

                        transaction.Rollback();
                    }
                }
            }
        }

        public void PrepareForEnterOnWorld(ClientConnection connection, long characterId)
        {
            var player = new Player(connection, connection.Characters.First(s => s.CharacterId == characterId))
            {
                GameSessionId = _gameSessionFactory.Next(),
            };

            using (var db = _gsDbFactory.OpenSession())
            {
                var daoItems = db.QueryOver<CharacterItem>().Where(i => i.CharacterId == characterId).List();
                var items = new List<CharacterItem>();
                var equipItems = new List<CharacterItem>();

                foreach (var it in daoItems)
                {
                    if (it.StorageType == (int) StorageType.Equipment)
                        equipItems.Add(it);
                    if (it.StorageType == (int) StorageType.Inventory)
                        items.Add(it);
                }
                
                player.Inventory = new InventoryStorage(items.ToDictionary<CharacterItem, short, AStorageItem>(e => (short)(e.Slot + 1), e => new InventoryItem(e.ItemId, e.Count) {StorageType = (StorageType) e.StorageType}), 48);
                player.Equipment = new EquipmentStorage(equipItems.ToDictionary<CharacterItem, short, AStorageItem>(e => (short)(e.Slot + 1), e => new InventoryItem(e.ItemId, e.Count) {StorageType = (StorageType) e.StorageType}), 48);
            }

            connection.ActivePlayer = player;
            connection.ActivePlayer.PlayerActions += (action, parameters) =>
            {
                switch (action)
                {
                    case Player.PlayerAction.Logout:
                        if (connection.ActivePlayer != null)
                        {
                            UpdateCharacter(connection);
                            _gameSessionFactory.ReleaseUniqueInt(connection.ActivePlayer.GameSessionId);
                        }
                        break;                       
                }
            };

            var sessionId = BitConverter.GetBytes(connection.ActivePlayer.GameSessionId).ToHex();

            new SpRaw("000000000000000000000000", 0x0cec).SendRaw(connection);
            new SpRawx10ab).SendRaw(connection);
            new SpRaw("5F97875600000000000000005965B5B900000000000000000000000000", 0x0d4e).SendRaw(connection);

            new SpSpawnCharacter(connection.ActivePlayer).Send(connection);

            #region Weather, Time
            new SpRaw("", 0x0cfb).SendRaw(connection);
            new SpRaw("010000", 0x115a).SendRaw(connection);
            new SpRaw("010089060001008806000100EA040001008A020001008A06000100F70500010037060001008706000100F405000100340600010003060001007E02000100BE04000100EB050001007F02000100FF05000100F205000100DD00000100DD05000100DE00000100DE05000100B1020001000D060001008D020001008C02000100CF000001008F020001000E060001008E02000100CB000001008B02000100860200010081020001008002000100900200010093020001005C00000100DC0000010058000001001906000100F305000100DF050001002406000100E0050001003A06000100F805000100510600", 0x0d12).SendRaw(connection);
            new SpRaw("0000", 0x1134).SendRaw(connection);
            new SpRaw("14", 0x0c46).SendRaw(connection); //inventory slot count?
            #endregion

            new SpInventory(connection.ActivePlayer).Send(connection);

            new SpRaw("0101" +
                      sessionId + //game session
                      "0000000000000000000000000000", 0x0bf1).SendRaw(connection);

            new SpCharacterEquipment(connection.ActivePlayer).Send(connection);

            #region Chat, Chat tabs, Everything chat related
            new SpRaw("00010000000000000000000000", 0x1082).SendRaw(connection);
            new SpRaw("01010000000000000000000000", 0x1082).SendRaw(connection);
            new SpRaw("02010000000000000000000000", 0x1082).SendRaw(connection);
            new SpRaw("03010000000000000000000000", 0x1082).SendRaw(connection);
            new SpRaw("04010000000000000000000000", 0x1082).SendRaw(connection);
            new SpRaw("05010000000000000000000000", 0x1082).SendRaw(connection);
            new SpRaw("06010000000000000000000000", 0x1082).SendRaw(connection);
            new SpRaw("07010000000000000000000000", 0x1082).SendRaw(connection);
            new SpRaw("08010000000000000000000000", 0x1082).SendRaw(connection);
            new SpRaw("015F978756000000000353BC8E07000000001E59752F02000000C6BB8E2902000000BC670FAD01000000AE09A90B000000005EF3105200000000B6539D9700000000A9C1B6E9000000003CFDF51E00000000FEF6C62D0100000059091C1101000000C960E9E401000000476244C801000000664134FB0100000075873316020000009F2F5A360100000094BA5DEF000000006C0359A6000000008C97EA8100000000661CBEC100000000", 0x0cdc).SendRaw(connection);
            new SpRaw("00000000040000007C0100000000000001000000010000000000000000000000020000000100000000000000000000004B000000000000000000000000000000", 0x1084).SendRaw(connection);
            #endregion
        }

        public void EnterOnWorldProcess(ClientConnection connection, int gameSession)
        {
            var sessionId = BitConverter.GetBytes(connection.ActivePlayer.GameSessionId).ToHex();
            var uid = BitConverter.GetBytes(connection.ActivePlayer.Uid).ToHex();

            new SpUpdateLevel(connection.ActivePlayer).Send(connection);

            #region I have no idea what these 2 do, but they are used.
            new SpRaw(sessionId + //game session
                      "9C8524000000000000007A440000000000000000000000000000400D0300400D0300400D0300400D0300", 0x0f73).SendRaw(connection);
            new SpRaw("01" +
                      sessionId + //game session
                      "0000FC410000FC4100002841000028410000284200000000000000009C852400000000000100000000008040140000000000000040420F00000000000000000000000000", 0x0f76).SendRaw(connection);
            #endregion

            new SpRaw("000000000000000000000000", 0x0f78).SendRaw(connection);
            new SpRaw("020008000B00000E0000", 0x0f7b).SendRaw(connection);
            new SpRaw("0000000000000000", 0x0f7f).SendRaw(connection);
            new SpRaw("02E8030000C8000000E8030000", 0x0eb7).SendRaw(connection);
            new SpRaw(sessionId + //game session
                      "0500000005000000050000000A0000000A0000000A0000000000000005000000000000000500000000000000050000000000000005000000", 0x0f75).SendRaw(connection);

            #region Skills, Crafting
            new SpRaw(uid + //uid
x0d27).SendRaw(connection);
            #endregion

            return;
            /*TODO*/

            #region Loading Map screen
            
            new SpRaw("05009B9E010000009D9E01000000FE9E01000000129F01000000149F01000000", 0x0ea2).SendRaw(connection);            
            new SpRaw("000006006D000000000000000000000000003D00000001000000000000000000C90000000000000000000000000041000000000000000000000000004200000000000000000000000000CC00000000000000000000000000", 0x0e7d).SendRaw(connection);
            new SpRaw("0000", 0x0e80).SendRaw(connection);
            new SpRaw("0000", 0x0ea7).SendRaw(connection);
            new SpRaw("0000", 0x0ea7).SendRaw(connection);
            new SpRaw("0000", 0x0ea7).SendRaw(connection);
            new SpRaw("000000000300000000000000", 0x0d26).SendRaw(connection);
            new SpRaw("0000", 0x0e6e).SendRaw(connection);
            new SpRaw("0000", 0x0e6f).SendRaw(connection);
                     
            new SpRaw("0E00A20F0000010000001200000001000000DD0B00000100000085010000010000008701000001000000DC02000001000000D80B000001000000A30F000002000000DB0B000004000000A40F000002000000A50F000001000000A70F000001000000A80F000001000000A90F000001000000", 0x0c6c).SendRaw(connection);
            new SpRaw("1E001E00", 0x0c6b).SendRaw(connection);
            new SpRaw("0000", 0x0fc4).SendRaw(connection);
            new SpRaw("01000000", 0x0c29).SendRaw(connection);
            new SpRaw("003C55120000000000000000000000000000000000000000000000000000000000000000000000000000000000000100550D0000000010E132201700000059E1", 0x0d2c).SendRaw(connection);
            new SpRaw("000450120000000000000000000000000000000000000000000000000000000000000000000000000000000000000100460D0000000010E1322017000000FEFF", 0x0d2c).SendRaw(connection);
            #endregion

            #region Spawn my player
            new SpRaw
                      sessionId +  //game session

                      uid + //uid
                      "01000000010000000200000001000000000000000000000000000000A128000000FCFFFF2500000000000000000000000005E800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FCFFFF010800000000000000030000000000000000000000000000000000000000000000A05100000000000000000000000000000000000000F8FFFF0000000000000000000000000200000000000000000000000000", 0x0bb9).SendRaw(connection);
            new SpRaw("0100000100FCFFFF0000000000000000000000000100" +
                      sessionId + //game session

                      uid + //uid
                      "01000000010000000200000001000000000000000000000000000000A128000000FCFFFF2500000000000000000000000005E800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FCFFFF010800000000000000030000000000000000000000000000000000000000000000A05100000000000000000000000000000000000000FCFFFF0000000000000000000000000200000000000000000000000000", 0x0bb9).SendRaw(connection);
            new SpRaw(sessionId + //game session, UNKNOWN! Only 2 packets used for spawn which are above.
                      "302622000000000000007A440000000000000000000000000000400D0300400D0300400D0300400D0300", 0x0f59).SendRaw(connection);
            #endregion


            #region Mana is 0x0f52 and 0x0f51 unk
            new SpRaw("ABE7FFFFFFFFFFFFABE7FFFFFFFFFFFF" +
                      sessionId +//game session
                      "000000000000000000004F4300004F4300004F4300FCFFFF", 0x0f51).SendRaw(connection);

            new SpRaw("ABE7FFFFFFFFFFFFABE7FFFFFFFFFFFF" +
                      sessionId + //game session
                      "0000000000000000B1000000B1000000B100000000", 0x0f52).SendRaw(connection);
            #endregion

            new SpCharacterCustimozationData(connection.ActivePlayer).Send(connection);

            Core.Act(s =>
            {
                s.CharacterProcessor.EndLoad(connection);
                s.WorldProcessor.EndLoad(connection);
            });
        }

        public object OnUnload()
        {
            return null;
        }
    }
}
